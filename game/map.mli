(* The overall map of the game *)
type map

(* Makes up each section of the map *)
type tile

(* The possible natural geographies of a tile *)
type geography

(* The possible resources present on a tile *)
type resource

(* The possible improvements that can be made to a tile *)
type improvement

(* The possible terrain features that can exist on a tile *)
type terrain

(* [get_tile] gets the tile at the specified cooridnates on the given map. *)
val get_tile : map -> int -> int -> tile

(* [resource] returns Some(resource) if the tile contains a luxury or 
 * production resource. Returns None otherwise. *)
val resource : tile -> resource option

(* [geography] returns the natural geography of the tile. *)
val geography : tile -> geography

(* [food_gen] returns how much food is generated by the tile per turn. *)
val food_gen : tile -> int

(* [tech_gen] returns how much technology is generated by the tile per turn. *)
val tech_gen : tile -> int

(* [labor_gen] returns how much label is generated by the tile per turn. *)
val labor_gen : tile -> int

(* [gold_gen] returns how much gold is generated by the tile per turn. *)
val gold_gen : tile -> int

(* [improvement] returns Some(improvement) if the tile contains an improvement. 
 * Returns None otherwise. *)
val improvement : tile -> improvement option

(* [terrain] returns Some(terrain) if the tile contains a terrain feature. 
 * Returns None otherwise. *)
val terrain : tile -> terrain option

(* [city_id] returns Some(int) where the int is a city id if the tile belongs to a city.
 * Returns None otherwise. *)
val city_id : tile -> int option

(* [entity] returns Some(Entity.entity) if the tile has a unit stationed on the tile. 
 * Returns None otherwise. *)
val entity : tile -> Entity.entity

(* [city] returns Some(City.city) if the tile is the site of a city
 * Returns None otherwise. *)
val city : tile -> City.city
